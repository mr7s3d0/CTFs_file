#!/usr/bin/env python3

import os
import sys

def usage():
    prog = os.path.basename(sys.argv[0])
    print("usage: {0} SQ_FILE".format(prog), file=sys.stderr)

try:
    _, fn = sys.argv
except Exception:
    usage()
    sys.exit(1)

with open(fn) as f:
    data = f.read()

def uint64_to_int64(x):
    x %= 2 ** 64
    if x >= 2 ** 63:
        x -= 2 ** 64
    return x

mem = [int(x) for x in data.split()] + [0] * 0x1000
pc = 0

while True:
    if pc < 0:
        break

    A, B, C = mem[pc:pc+3]

    if A < 0:
        raise RuntimeError("A < 0")

    if B >= 0:
        mem[B] = uint64_to_int64(mem[B] - mem[A])
        if mem[B] <= 0:
            pc = C
        else:
            pc += 3
    elif B == -1:
        sys.stdout.buffer.write(bytes([mem[A] % 256]))
        sys.stdout.buffer.flush()
        # FIXME: What happens to pc when B == -1?
        pc = C
    else:
        raise RuntimeError("B < -1")
